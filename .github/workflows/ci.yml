name: 'ü™Ñ Mentor Wizard | üîÑ CI'

on:
  push:
    branches:
      - develop
    paths-ignore:
      - README.md
  pull_request:
    branches:
      - develop
      - feature/*
      - fix/*
      - hotfix/*
      - epic/*
      - release/*
    paths-ignore:
      - README.md

jobs:
  cleanup:
    name: 'üßπ Clean up GitHub repo'
    runs-on: ubuntu-latest
    permissions: write-all
    if: github.event_name != 'pull_request'

    steps:
    - name: 'üóë Delete workflow runs'
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 7
        keep_minimum_runs: 1
        delete_workflow_pattern: ci.yml

  composer-dependencies:
    runs-on: ubuntu-latest
    env:
      DB_HOST: 127.0.0.1
      POSTGRES_DB: testing
      POSTGRES_USER: db
      POSTGRES_PASSWORD: db
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: db
          POSTGRES_PASSWORD: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
      - name: Install dependencies
        run: |
          cp .env.ci .env
          composer install --no-interaction --prefer-dist
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          key: "${{ runner.os }}-${{ github.ref_name }}-composer-${{ hashFiles('**/composer.lock') }}"
          restore-keys: ${{ runner.os }}-${{ github.ref_name }}-composer-
          path: |
            vendor/
            _ide_helper.php
            _ide_helper_models.php
            _ide_helper_actions.php
            .phpstorm.meta.php
      - name: Upload vendor artifacts
        uses: actions/upload-artifact@v4
        with:
          name: composer-vendor
          path: vendor/

  yarn-dependencies:
    runs-on: ubuntu-latest
    needs: composer-dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download vendor artifacts
        uses: actions/download-artifact@v4
        with:
          name: composer-vendor
          path: vendor/
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
      - name: Install Yarn
        run: |
          corepack enable
          corepack prepare yarn@4.6.0 --activate
      - name: Install dependencies
        run: yarn install
      - name: Build assets
        run: yarn build
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          key: "${{ runner.os }}-${{ github.ref_name }}-node-${{ hashFiles('**/yarn.lock') }}"
          restore-keys: ${{ runner.os }}-${{ github.ref_name }}-node-
          path: node_modules/
      - name: Upload node artifacts
        uses: actions/upload-artifact@v4
        with:
          name: node-build
          path: public/build/

  lints:
    runs-on: ubuntu-latest
    needs: composer-dependencies
    permissions: write-all
    env:
      DB_HOST: 127.0.0.1
      POSTGRES_DB: testing
      POSTGRES_USER: db
      POSTGRES_PASSWORD: db
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: db
          POSTGRES_PASSWORD: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download vendor artifacts
        uses: actions/download-artifact@v4
        with:
          name: composer-vendor
          path: vendor/
      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pdo, pdo_pgsql
      - name: Make PHPStan executable
        run: chmod +x ./vendor/bin/phpstan
      - name: Create IDE Helper files
        run: composer ide-helper
      - name: Run PHPStan
        run: |
          cp .env.ci .env
          php artisan key:generate
          ./vendor/bin/phpstan analyse --memory-limit=2G --error-format=json > phpstan.json || true
      - name: Upload code quality report
        uses: actions/upload-artifact@v4
        with:
          name: codequality
          path: codequality.json

#  tests:
#    runs-on: ubuntu-latest
#    needs: [composer-dependencies, yarn-dependencies]
#    env:
#      DB_HOST: 127.0.0.1
#      POSTGRES_DB: testing
#      POSTGRES_USER: db
#      POSTGRES_PASSWORD: db
#    services:
#      postgres:
#        image: postgres:17
#        ports:
#          - 5432:5432
#        env:
#          POSTGRES_DB: testing
#          POSTGRES_USER: db
#          POSTGRES_PASSWORD: db
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
#      - name: Set up PHP
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.4'
#          coverage: xdebug
#          extensions: pdo, pdo_pgsql
#      - name: Run tests
#        run: |
#          cp .env.ci .env
#          php artisan key:generate
#          php artisan vendor:publish --tag=laravel-assets --tag=log-viewer-assets --tag=telescope-assets --ansi --force
#          ./vendor/bin/pest --coverage --parallel --coverage-cobertura=coverage/coverage.xml --coverage-clover=coverage/coverage-clover.xml --coverage-html=coverage
#          ./vendor/bin/pest --mutate --covered-only --parallel --min=100
#      - name: Upload coverage report
#        uses: actions/upload-artifact@v3
#        with:
#          name: coverage
#          path: coverage/coverage.xml

  test:
    name: '‚ôªÔ∏è Test | ${{ matrix.command.name }}'
    runs-on: ubuntu-latest
    needs: [composer-dependencies, yarn-dependencies]

    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: testing
          POSTGRES_USER: db
          POSTGRES_PASSWORD: db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        command:
          - { name: 'üß¨ Unit\Feature', command: ./vendor/bin/pest --coverage --parallel }
          - { name: 'ü¶† Mutate',  command: ./vendor/bin/pest --mutate --covered-only --parallel --min=100 }

    steps:
      - name: 'üõé Checkout'
        uses: actions/checkout@v4

      - name: Download vendor artifacts
        uses: actions/download-artifact@v4
        with:
          name: node-build
          path: public/build/

      - name: '‚öôÔ∏è Prepare environment'
        uses: ./.github/actions/setup-testing

      - name: '${{ matrix.command.name }} tests'
        run: ${{ matrix.command.command }}
        env:
          DB_HOST: 127.0.0.1
          DB_DATABASE: testing
          DB_USERNAME: db
          DB_PASSWORD: db

#      - name: '‚òÇÔ∏è Upload results to Codecov'
#        uses: codecov/codecov-action@v5
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          slug: maks-oleksyuk/notes
#          flags: ${{ matrix.command.name }}
#          directory: ./var/report
#
#      - name: '‚òÇÔ∏è Upload test results to Codecov'
#        uses: codecov/test-results-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          flags: ${{ matrix.command.name }}
#          directory: ./var/report
