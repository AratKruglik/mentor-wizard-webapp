stages:
  - pre-build
  - tests
#  - build
#  - deploy
#  - rollback

# ----------------- Global configs -------------------------

services:
  - name: postgres:17-alpine3.20
    variables:
      POSTGRES_DB: test_mw_db
      POSTGRES_USER: test_mw_user
      POSTGRES_PASSWORD: test_mw_user_password


variables:
  POSTGRES_DB: test_mw_db
  POSTGRES_USER: test_mw_user
  POSTGRES_PASSWORD: test_mw_user_password
  DB_CONNECTION: pgsql
  DB_HOST: 127.0.0.1
  DB_PORT: 5432
  DB_DATABASE: test_mw_db
  DB_USERNAME: test_mw_user
  DB_PASSWORD: test_mw_user_password
  REDIS_HOST: 127.0.0.1
  REDIS_PORT: 6379

cache:
  paths:
    - vendor/

image: php:8.4-cli

# ----------------- Jobs -------------------------

# [PRE-BUILD] PHP Dependencies
dev-dependencies:
  stage: pre-build
  except:
    - tags
  only:
    - merge_requests
  before_script:
    - apt update && apt install -y zip unzip libpq-dev postgresql-client curl nodejs npm
    - docker-php-ext-install pdo_pgsql
    - curl --show-error --silent https://getcomposer.org/installer | php
    - cp .env.ci .env
  script:
    - php composer.phar install --no-interaction --prefer-dist
    - npm install -g yarn@latest
    - yarn install
    - yarn build
  artifacts:
    paths:
      - vendor/
      - public/build/
    expire_in: 1 hour
  tags:
    - mw-build

ide-helper:
  stage: pre-build
  cache:
    policy: pull
  except:
    - tags
  only:
    - merge_requests
  before_script:
    - apt update && apt install -y zip unzip libpq-dev postgresql-client
    - docker-php-ext-install pdo_pgsql
  script:
    - php artisan ide-helper:models -M
    - php artisan ide-helper:actions
    - php artisan ide-helper:meta
    - php artisan ide-helper:generate
  dependencies:
    - dev-dependencies
  artifacts:
    paths:
      - _ide_helper.php
      - _ide_helper_models.php
      - _ide_helper_actions.php
      - .phpstorm.meta.php
  when: always
  allow_failure: true
  tags:
    - mw-build

# [TEST] PHPMD
lints:
  stage: tests
  cache:
    policy: pull
  except:
    - tags
  only:
    - merge_requests
  script:
    - echo 'PHP Stan is starting to analyse'
    - ./vendor/bin/phpstan analyse --memory-limit=2G --error-format=json > phpstan.json
  artifacts:
    reports:
      codequality: phpstan.json
  dependencies:
    - dev-dependencies
    - ide-helper
  allow_failure: true
  tags:
    - mw-build

# [TEST] RUN PHPUNIT TESTS
tests:
  stage: tests
  except:
    - tags
  before_script:
    - apt update && apt install -y zip unzip libpq-dev postgresql-client
    - pecl install xdebug
    - docker-php-ext-install pdo_pgsql
    - docker-php-ext-enable xdebug
    - echo "xdebug.mode=coverage" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    - echo "xdebug.client_host=host.docker.internal" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    - echo "xdebug.client_port=9003" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    - echo "xdebug.start_with_request=yes" >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
    - cp .env.ci .env
    - cp .env.ci .env.testing
    - mkdir -p storage/framework/{sessions,views,cache}
    - chmod -R 777 storage
    - chmod -R 777 bootstrap/cache
    - php artisan key:generate
    - php artisan vendor:publish --tag=laravel-assets --tag=log-viewer-assets --ansi --force
  cache:
    policy: pull
  only:
    - merge_requests
  script:
    - php -v
    - echo "Run Pest tests with coverage"
    - php artisan test --ci --profile --coverage --coverage-clover coverage.xml
    - echo "Run Pest Mutation tests"
    - php artisan test --mutate --covered-only --parallel --min=100
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  dependencies:
    - dev-dependencies
    - ide-helper
  tags:
    - mw-build
