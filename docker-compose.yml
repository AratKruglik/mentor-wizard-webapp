services:
    db:
        image: &db-image postgres:17-alpine3.20
        restart: unless-stopped
        container_name: mw-db
        environment:
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        ports:
            - 5432:5432
        volumes:
            - db_data:/var/lib/postgresql/data
        networks:
            - mw-db-network
        healthcheck:
            test: pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}
            interval: 5s
            timeout: 10s
            retries: 20

    db-test:
        image: *db-image
        container_name: mw-db-test
        command: postgres -c 'max_connections=250' -c 'max_locks_per_transaction=128'
        restart: unless-stopped
        environment:
            POSTGRES_DB: test_mw_db
            POSTGRES_USER: test_mw_user
            POSTGRES_PASSWORD: test_mw_user_password
        networks:
            - mw-db-network

    app:
        &app
        build:
            context: ./
            dockerfile: docker/php/Dockerfile-dev
        restart: unless-stopped
        container_name: mw-app
        environment:
            COMMAND: php artisan octane:start --watch --host=0.0.0.0 --port=8000 --verbose
            PROCESS: app
            XDEBUG_MODE: debug,coverage
        depends_on:
            db:
                condition: service_healthy
            redis:
                condition: service_healthy
        volumes:
            - ./:/var/www
            - mw_app_composer_data:/.composer
            - mw_app_npm_data:/.npm
        ports:
            - "5173:5173"
        networks:
            - mw-db-network
            - mw-webserver-network
            - mw-redis-network
        healthcheck:
            test: curl -s http://localhost:8000/up >/dev/null || exit 1
            interval: 5s
            timeout: 10s
            retries: 20

    workers:
        <<: *app
        container_name: mw-worker
        environment:
            COMMAND: php artisan queue:work
            PROCESS: worker
        ports: []
        networks:
            - mw-db-network
            - mw-redis-network

    schedule:
        <<: *app
        container_name: mw-schedule
        environment:
            COMMAND: supercronic -quiet /var/www/docker/php/schedule/schedule
            PROCESS: schedule
        networks:
            - mw-db-network
            - mw-redis-network
        ports: []
        healthcheck:
            test: supercronic -test /var/www/docker/php/schedule/schedule | grep -q 'is valid' # TODO try spatie LARAVEL-HEALTH
            interval: 5s
            timeout: 10s
            retries: 2

    webserver:
        image: nginx:1.26.0-alpine
        container_name: mw-webserver
        restart: unless-stopped
        volumes:
            - ./:/var/www
            - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
            #            - ./docker/nginx/certs/:/etc/nginx/certs/
            - ./storage/logs/nginx/:/var/log/nginx/
        ports:
            - 80:80
        #            - 443:443
        networks:
            - mw-webserver-network
        healthcheck:
            test: curl -s http://localhost/up >/dev/null || exit 1
            interval: 5s
            timeout: 10s
            retries: 20

    redis:
        image: redis:7.2.4-alpine
        restart: unless-stopped
        container_name: mw-redis
        command:
            - 'redis-server'
            - '--requirepass ${REDIS_PASSWORD}'
        volumes:
            - redis_data:/data
        networks:
            - mw-redis-network
        healthcheck:
            test: redis-cli ping
            interval: 5s
            timeout: 10s
            retries: 20

    mailpit:
        image: 'axllent/mailpit:latest'
        ports:
            - '${FORWARD_MAILPIT_PORT:-1025}:1025'
            - '${FORWARD_MAILPIT_DASHBOARD_PORT:-8025}:8025'
        networks:
            - mw-webserver-network

volumes:
    db_data:
        driver: local
        name: mw_db_data
    redis_data:
        driver: local
        name: mw_redis_data
    mw_app_composer_data:
        driver: local
        name: mw_app_composer_data
    mw_app_npm_data:
        driver: local
        name: mw_app_npm_data

networks:
    mw-db-network:
        driver: bridge
        name: mw-db-network
    mw-webserver-network:
        driver: bridge
        name: mw-webserver-network
    mw-redis-network:
        driver: bridge
        name: mw-redis-network
